{"version":"1.1","models":{"kjzl6hvfrbw6c7gypay8gc84k4lvb4gqy28w2kxenq28dp2dmg9rqu3jd02bzgr":[{"jws":{"payload":"AXESIPXns68aJ3XR8bibzjEU4Ph4gx-5JjrqxYbd-0TEjQ0g","signatures":[{"signature":"Wrq6mR4Uot1AShuaYl-JTSSasA5dX4kpt4nDPJNbVRp7lQgdzxINW4xf34d0YiiNrBAMR6OWFkyKxRej0BZvAg","protected":"eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa3Vzb1RzVFdyc0hnNW13UzFiWGhyQUUyeW1INWhiNTJNMjYyWUFZempMTnZ6I3o2TWt1c29Uc1RXcnNIZzVtd1MxYlhockFFMnltSDVoYjUyTTI2MllBWXpqTE52eiJ9"}],"link":"bafyreihv46z26grhoxi7doe3zyyrjyhypcbr7ojghlvmlbw57ncmjdinea"},"linkedBlock":""}]},"indices":{"kjzl6hvfrbw6c7gypay8gc84k4lvb4gqy28w2kxenq28dp2dmg9rqu3jd02bzgr":[{"fields":[{"path":["type"]}]}]},"aliases":{"kjzl6hvfrbw6c7gypay8gc84k4lvb4gqy28w2kxenq28dp2dmg9rqu3jd02bzgr":"NovaEVPAttestationsDB"},"views":{"account":{},"root":{},"models":{"kjzl6hvfrbw6c7gypay8gc84k4lvb4gqy28w2kxenq28dp2dmg9rqu3jd02bzgr":{}}},"commonEmbeds":["EVPReportDB","LocationInformationDB","HardwareConfigurationDB","HardwareDetailsDB","WaterConsumptionDB","ElectricityConsumptionDB","RenewableEnergyProducedDB","RenewableEnergyProcuredDB","PreliminaryResultsRecMatchingDB","ProviderNetworkDB","GreenscoreDB","GreenscoreConfidenceScoreDetailsDB","NetworkMarginalEmissionsDB","NetworkScope2EmissionsCalculationDB","Scope2EmissionsCalculationDB","OtherGreenscoreInformationDB","AuditReviewDB"]}
