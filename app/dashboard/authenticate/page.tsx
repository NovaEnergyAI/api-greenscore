'use client';

import React, { useState, useEffect } from 'react';
import { authenticateCeramic } from '@root/scripts/authenticate';
import { useCeramicContext } from '@root/context/CeramicContext';

const AuthPrompt = () => {
  const [isVisible, setIsVisible] = useState(true);
  const clients = useCeramicContext();
  const { ceramic, composeClient } = clients;

  useEffect(() => {
    // Automatically hide the popup if already logged in
    if (localStorage.getItem('logged_in') === 'true') {
      setIsVisible(false);
    }
  }, []);

  const handleEthPkh = async () => {
    try {
      localStorage.setItem('ceramic:auth_type', 'eth');
      await authenticateCeramic(ceramic, composeClient);
      setIsVisible(false);
    } catch (error) {
      console.error('Ethereum DID PKH Authentication failed:', error);
    }
  };

  const clearLocalStorage = () => {
    localStorage.removeItem('ceramic:eth_did');
    localStorage.removeItem('ceramic:auth_type');
    localStorage.removeItem('logged_in');
    alert('Local storage cleared. You may need to re-authenticate.');
    setIsVisible(true); // Show the auth popup again after clearing storage
  };

  return (
    <div>
      {isVisible && (
        <div className="popup">
          <div className="popup-content">
            <h2>Authenticate</h2>
            <span>
              <button onClick={handleEthPkh}>Ethereum DID PKH</button>
            </span>
            <br />
            <br />
            <strong>Ethereum DID PKH:</strong> A DID generated by your wallet
            <br />
            (in simpler terms: login with MetaMask).
          </div>
        </div>
      )}
      <button onClick={clearLocalStorage} style={{ marginTop: '20px', padding: '10px', background: '#f00', color: '#fff', border: 'none', borderRadius: '5px' }}>
        Clear Storage
      </button>
    </div>
  );
};

export default AuthPrompt;
